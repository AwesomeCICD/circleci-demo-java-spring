version: 2.1

orbs:
  dynamic-split:
    orbs:
      aws-cli: circleci/aws-cli@1.1.0
    commands:
      test:
        description: Run test with dynamic splitting algorithm
        parameters:
          split-command:
            type: string
          test-command:
            type: string
        steps:
          - create-queue
          - populate-queue:
              split-command: <<parameters.split-command>>
          - get-queue-url
          - run-tests:
              test-command: <<parameters.test-command>>
          - send-done-message
          - delete-queue

      create-queue:
         description: Create a FIFO queue to distribute test work.
         steps:
           - aws-cli/setup
           - run:
              name: create work queue
              command: |
                 echo 'export queue_name=queue-${CIRCLE_JOB}-${CIRCLE_WORKFLOW_ID}.fifo' >> $BASH_ENV
                 echo 'export done_queue_name=done-queue-${CIRCLE_JOB}-${CIRCLE_WORKFLOW_ID}.fifo' >> $BASH_ENV
                 if [ $CIRCLE_NODE_INDEX -eq 0 ]
                 then
                    echo 'export queue_url=$(aws sqs create-queue --queue-name $queue_name --attributes \
                    'FifoQueue=true,ContentBasedDeduplication=true' | jq -r ".QueueUrl")' >> $BASH_ENV
                    echo 'export done_queue_url=$(aws sqs create-queue --queue-name $done_queue_name --attributes \
                    'FifoQueue=true,ContentBasedDeduplication=true' | jq -r ".QueueUrl")' >> $BASH_ENV
                 fi
      populate-queue:
        description: Populate the test queue with work
        parameters:
          split-command:
             type: string
        steps:
           - run:
              name: populate test queue
              command: |
                 if [ $CIRCLE_NODE_INDEX -eq 0 ]
                 then
                    # glob out targets in a format `cargo test` understands
                    test_targets=$(<<parameters.split-command>>)
                    # send off batches of messages by 10
                    xargs -n 10 \<<<$test_targets | while read x
                    do
                       echo $x
                       echo $x | jq -nR '( input | split(" ") ) as $vals | $vals | to_entries | map({"Id": (.key|tostring), "MessageGroupId": (.key|tostring), "MessageBody": .value })' > sqs_batch_message.json
                       aws sqs send-message-batch --queue-url $queue_url --entries file://sqs_batch_message.json
                    done
                 fi
      get-queue-url:
        description: Get the queue url for this test run
        steps:
          - run:
             name: get queue url
             command: |
                if [ $CIRCLE_NODE_INDEX -gt 0 ]
                then
                   echo $queue_name
                   echo $done_queue_name
                   queue_url=''
                   while [ -z $queue_url ]; do
                     echo 'export queue_url=$(aws sqs get-queue-url --queue-name $queue_name | jq -r ".QueueUrl")' >> $BASH_ENV
                     echo "queue_url = $queue_url"
                     source $BASH_ENV
                   done
                   done_queue_url=''
                   while [ -z $done_queue_url ]; do
                     echo 'export done_queue_url=$(aws sqs get-queue-url --queue-name $done_queue_name | jq -r ".QueueUrl")' >> $BASH_ENV
                     echo "done_queue_url = $done_queue_url"
                     source $BASH_ENV
                   done
                fi
      delete-queue:
        description: cleanup queue resources
        steps:
          - run:
             name: delete test queues
             command: |
                echo $CIRCLE_NODE_INDEX
                if [ $CIRCLE_NODE_INDEX -eq 0 ]
                then
                   COUNTER=0
                   while [ $COUNTER -lt $(($CIRCLE_NODE_TOTAL - 1)) ]; do
                      messages=$(aws sqs receive-message --queue-url $done_queue_url --max-number-of-messages 1 --wait-time-seconds 1 | jq -r ".Messages[]")
                      echo $messages
                   if [ ! -z "$messages" ]
                   then
                      echo "we are here"
                      receipt_handle=$(echo $messages | jq -r ".ReceiptHandle")
                      aws sqs delete-message --queue-url $done_queue_url --receipt-handle $receipt_handle
                      let COUNTER=COUNTER+1
                   fi
                   done
                     aws sqs delete-queue --queue-url $queue_url
                     aws sqs delete-queue --queue-url $done_queue_url
                fi
             when: always

      run-tests:
        description: run tests across nodes
        parameters:
          test-command:
            description: command that is used to run tests
            type: string
        steps:
          - run:
             name: run tests across nodes
             command: |
                COUNTER=0
                while [ $COUNTER -lt 3 ]; do
                   messages=$(aws sqs receive-message --queue-url $queue_url --attribute-names All --message-attribute-names All --max-number-of-messages 1 --wait-time-seconds 1 | jq -r ".Messages[]")
                   echo $messages
                   if [ ! -z "$messages" ]
                   then
                      current_test=$(echo $messages | jq -r ".Body")
                      receipt_handle=$(echo $messages | jq -r ".ReceiptHandle")
                      aws sqs delete-message --queue-url $queue_url --receipt-handle $receipt_handle
                      echo $current_test
                      echo current state of counter = $COUNTER
                      COUNTER=0
                      echo $current_test | xargs -n 1 -x -I@ << parameters.test-command >>
                      else
                      let COUNTER=COUNTER+1
                   fi
                   done
      send-done-message:
        description: Communicate to master node that work is done
        steps:
          - run:
             command: |
                if [ $CIRCLE_NODE_INDEX -gt 0 ]
                then
                   echo "sending done message"
                   aws sqs send-message --queue-url $done_queue_url --message-body $CIRCLE_NODE_INDEX --message-group-id $CIRCLE_NODE_INDEX
                fi
             when: always

jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install dependencies
          command: ./gradlew build -x test
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build

  static-test-split:
    # Remove if parallelism is not desired
    parallelism: 2
    resource_class: medium+
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=3"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - attach_workspace:
          at: .

      - run:
          name: Run tests in parallel
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
            | cut -c 1- | sed 's@/@.@g' \
            | sed 's/.\{5\}$//' \
            | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS

      - run:
          name: Generate code coverage report
          command:
            ./gradlew jacocoTestReport
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: always
      - store_artifacts:
          path: build/reports/jacoco/test/html
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      # This will be empty for all nodes except the first one
      - store_artifacts:
          path: build/

  dynamic-test-split:
    # Remove if parallelism is not desired
    parallelism: 2
    resource_class: medium+
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.workers.max=3"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
      - image: circleci/postgres:12-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - attach_workspace:
          at: .

      - dynamic-split/test:
          split-command: cd src/test/java && find -name '*.java' -execdir basename {} .java ';'
          test-command: ./gradlew test --tests @

      - run:
          name: Generate code coverage report
          command:
            ./gradlew jacocoTestReport
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
          when: always
      - store_artifacts:
          path: build/reports/jacoco/test/html
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      # This will be empty for all nodes except the first one
      - store_artifacts:
          path: build/

workflows:
  version: 2
  workflow:
    jobs:
    - build
    - static-test-split:
        requires:
          - build
    - dynamic-test-split:
        requires:
          - build
